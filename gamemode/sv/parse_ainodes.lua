/*
	Original: Idk
	Revised by Kai D. (2024)

	This file parses an .AIN file and returns a table of all the nodes.
*/

/*
	.AIN An AIN file is a nodegraph for Source engine games. 
	It stores information relating to info_nodes and their proximity 
	and visibility for use by the AI for movement around a map. 
	AIN files are automatically generated by the game. 
	If there is no existing AIN file specific to that map, 
	or if it was generated for an older version of that map, 
	the AIN file ( <MAP_NAME>.ain ) is generated by the game. 
	The message "Node graph out of date. Rebuilding..." is 
	printed to the screen when a build or rebuild is occurring. 

	Source: https://developer.valvesoftware.com/wiki/AIN
*/

/* specify the source .ain version number*/
local AINET_VERSION_NUMBER = 37

/* the number of hulls per node */
local NUM_HULLS = 10

/* the arbitrary max number of nodes */
local MAX_NODES = 4096

/* sizes of integers and shorts (may vary by system, however, this is used by the game) */
local SIZEOF_INT = 4
local SIZEOF_SHORT = 2

// To Unsigned Short
local function toUShort(b)
	local i = {string.byte(b,1,SIZEOF_SHORT)} 	/* read first two bytes */
	return i[1] + i[2] * 256	// 256 - shift the bits by 8
end

// converts the given (b) to an unsigned integer
local function toInt(b)
	local i = {string.byte(b,1,SIZEOF_INT)}
	i = i[1] + i[2] * 256 + i[3] * 65536 + i[4] * 16777216
	if (i > 2147483647) then return i -4294967296 end
	return i
end

local function ReadInt(f) return toInt(f:Read(SIZEOF_INT)) end

local function ReadUShort(f) return toUShort(f:Read(SIZEOF_SHORT)) end

// Parses an AIN file and reads
// the structure information into a table.
function ainParse(f)
		f = file.Open(f, "rb", "GAME")

		if !f then
			return
		end

		/* ain_header struct */
		local ainVersion = ReadInt(f)	// int ainet_ver;
		local mapVersion = ReadInt(f)	// int map_ver;
		local numNodes = ReadInt(f)		// int num_nodes;

		local nodegraph = {
			ainetVersion = ainVersion,
			mapVersion = mapVersion
		}

		if ainVersion != AINET_VERSION_NUMBER then
			MsgN("ParseAINFile(): unexpected AINET_VERSION_NUMBER: " .. ainet_ver)
			return
		end


		if (numNodes > MAX_NODES or numNodes < 0) then
			MsgN("ParseAINFile(): awkward number of nodes: " .. numNodes)
			return
		end

		local nodes = {}

		/* ain_node struct */
		for i = 1, numNodes do
			local pos = Vector(f:ReadFloat(),
													  f:ReadFloat(),
														f:ReadFloat()) 	// Vector3 pos;
			local yaw = f:ReadFloat()							// float yaw;
			local flOffsets = {} 									// float flOffsets[NUM_HULLS];

			for j = 1, NUM_HULLS do
				flOffsets[j] = f:ReadFloat()
			end

			local nodeType = f:ReadByte()					// byte nodeType;
			local nodeInfo = ReadUShort(f)				// ushort nodeInfo;
			local zone = f:ReadShort()						// short zone;

			local node = {
				pos = pos,
				yaw = yaw,
				flOffsets = flOffsets,
				type = nodeType,
				info = nodeInfo,
				zone = zone,
				neighbor = {},
				numNeighbors = 0,
				link = {},
				numLinks = 0
			}
			table.insert(nodes, node)
		end

		/* ain_link struct */
		local numLinks = ReadInt(f)			// int num_links;
		local links = {}

		for i = 1, numLinks do
			local link = {}

			local srcID = f:ReadShort()
			local destID = f:ReadShort()

			local nodeSrc = nodes[srcID + 1]
			local nodeDest = nodes[destID + 1]

			/* sanity check */
			if (nodeSrc && nodeDest) then
				table.insert(nodeSrc.neighbor,nodeDest)
				nodeSrc.numNeighbors = nodeSrc.numNeighbors + 1

				table.insert(nodeSrc.link, link)

				nodeSrc.numLinks = nodeSrc.numLinks + 1
				link.src = nodeSrc
				link.srcID = srcID + 1

				table.insert(nodeDest.neighbor, nodeSrc)

				nodeDest.numNeighbors = nodeDest.numNeighbors + 1

				table.insert(nodeDest.link, link)
				nodeDest.numLinks = nodeDest.numLinks + 1
				link.dest = nodeDest
				link.destID = destID + 1
			else
				MsgN("ParseAINFile(): bad link: " .. srcID .. " " .. destID)
			end

			local moves = {}

			for j = 1,NUM_HULLS do
				moves[i] = f:ReadByte()
			end

			link.move = moves

			table.insert(links, link)
		end

		local lookup = {}

		for i = 1,numNodes do
			table.insert(lookup,ReadInt(f))
		end

	f:Close()

	nodegraph.nodes = nodes
	nodegraph.links = links
	nodegraph.lookup = lookup

	return nodegraph
end

// Returns all node positions in the AIN file for the current/specified map
function ainGetAllNodePositions(map)
	local fetchable = map or game.GetMap()

	PrintMessage(HUD_PRINTTALK, "ainGetAllNodePositions(): fetch node positions for " .. fetchable  .. "...")

	local nodeGraph = ainParse("maps/graphs/" .. fetchable .. ".ain")

	if !nodeGraph then
		return {}
	end

	local nodePositions = {}

	for _, node in pairs(nodeGraph.nodes) do
		local trStart = node.pos + Vector(0, 0, 30)

		local tr = util.TraceLine({
			start = trStart,
			endpos = trStart - Vector(0, 0, 10000),
			mask = MASK_NPCWORLDSTATIC,
		})

		local posFinal = tr.HitPos + tr.HitNormal * 15

		if bit.band( util.PointContents(posFinal), CONTENTS_WATER ) == CONTENTS_WATER then
			continue
		end

		table.insert(nodePositions, posFinal)
	end

	return nodePositions
end

